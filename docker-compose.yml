version: "3.7"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./config/mysql/mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
      - ./data/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      TZ: 'Asia/Hong_Kong'

  mongo1:
    hostname: mongo1
    container_name: mongo1
    image: mongo
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    command: '--quiet --bind_ip_all --port 27017 --replSet rs0'
    volumes:
      - ./data/mongo/db1:/data/db
    networks:
      mongo-network:
        ipv4_address: 172.59.0.2
      #environment:
      #MONGO_INITDB_ROOT_USERNAME: root
      #MONGO_INITDB_ROOT_PASSWORD: root
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:\"172.59.0.2:27017\"},{_id:1,host:\"172.59.0.3:27018\"},{_id:2,host:\"172.59.0.4:27019\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
      interval: 10s
      start_period: 30s

  mongo2:
    hostname: mongo2
    container_name: mongo2
    image: mongo
    restart: always
    expose:
      - 27018
    ports:
      - 27018:27018
    command: '--quiet --bind_ip_all --port 27018 --replSet rs0'
    volumes:
      - ./data/mongo/db2:/data/db
    networks:
      mongo-network:
        ipv4_address: 172.59.0.3
      #depends_on:
      #- mongo1

  mongo3:
    hostname: mongo3
    container_name: mongo3
    image: mongo
    restart: always
    expose:
      - 27019
    ports:
      - 27019:27019
    command: '--quiet --bind_ip_all --port 27019 --replSet rs0'
    volumes:
      - ./data/mongo/db3:/data/db
    networks:
      mongo-network:
          ipv4_address: 172.59.0.4
      #depends_on:
      #- mongo2


  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
networks:
  mongo-network:
    name: mongo-network
    ipam:
      config:
        - subnet: 172.59.0.0/16